}
}
is.null(map)
if(!is.null(map)) {
data(wrld_simpl, package = "maptools", envir = environment())
else {
if(class(map)%in%c("SpatialPolygonsDataFrame", "SpatialPolygons")) {
wrld_simpl <- map
} else {
stop("map needs to be of class 'SpatialPolygonsDataFrame' or 'SpatialPolygons'")
}
}
}
!is.null(map)
data(wrld_simpl, package = "maptools", envir = environment())
if(is.null(map)) {
data(wrld_simpl, package = "maptools", envir = environment())
} else {
if(class(map)%in%c("SpatialPolygonsDataFrame", "SpatialPolygons")) {
wrld_simpl <- map
} else {
stop("map needs to be of class 'SpatialPolygonsDataFrame' or 'SpatialPolygons'")
}
}
makeMask <- function(centre,
radius,
res = 150,
mask = "land",
map = NULL,
plot = FALSE) {
if(is.null(map)) {
data(wrld_simpl, package = "maptools", envir = environment())
} else {
if(class(map)%in%c("SpatialPolygonsDataFrame", "SpatialPolygons")) {
wrld_simpl <- map
} else {
stop("map needs to be of class 'SpatialPolygonsDataFrame' or 'SpatialPolygons'")
}
}
proj <- sprintf("%s +lon_0=%f +lat_0=%f +ellps=sphere", "+proj=laea", centre[1], centre[2])
# Circle
angle.inc <- 2 * pi/100
angles <- seq(0, 2 * pi - angle.inc, by = angle.inc)
xv <- cos(angles) * radius*1000 + centre[1]
yv <- sin(angles) * radius*1000 + centre[2]
mp  <- spTransform(wrld_simpl, CRSobj = CRS(proj))
mpb <- gBuffer(mp, byid=TRUE, width=0)
circ <- SpatialPolygons(list(Polygons(list(Polygon(cbind(c(xv,xv[1]), c(yv,yv[1])))),ID=1)), proj4string=CRS(proj))
wrld <- gIntersection(mpb, circ, byid=FALSE)
r0  <- raster(xmn = extent(circ)[1], xmx = extent(circ)[2],
ymn = extent(circ)[3], ymx = extent(circ)[4], val = 0, res = res*1000)
proj4string(r0) <- proj
grid <- rasterize(wrld, r0, 1)
grid <- is.na(grid)
switch(mask,
sea = {},
land = {
grid <- subs(grid, data.frame(c(0,1), c(1,0)))},
none = {
grid <- subs(grid, data.frame(c(0,1), c(1,1)))
}
)
out <- cbind(coordinates(grid), grid[])
ind <- over(SpatialPoints(out[,1:2], proj4string = CRS(proj)), circ)
if(plot) {
opar <- par(mar = c(0,0,0,0))
plot(wrld)
points(out[ind==1,1:2], pch = 16, cex = 0.2,
col = ifelse(out[ind==1,3]==1, adjustcolor("orange", alpha.f = 0.9),
adjustcolor("grey10", alpha.f = 0.9)))
par(opar)
}
crds0 <- project(matrix(out[ind==1,1:2], ncol = 2, byrow = F), proj, inv = T)
crds <- cbind(crds0, mask = out[ind==1,3])
crds <- crds[!is.na(crds[,3]),]
list(crds, map = wrld, grid = grid)
}
makeMask <- function(centre,
radius,
res = 150,
mask = "land",
map = NULL,
plot = FALSE) {
if(is.null(map)) {
data(wrld_simpl, package = "maptools", envir = environment())
} else {
if(class(map)%in%c("SpatialPolygonsDataFrame", "SpatialPolygons")) {
wrld_simpl <- map
} else {
stop("map needs to be of class 'SpatialPolygonsDataFrame' or 'SpatialPolygons'")
}
}
proj <- sprintf("%s +lon_0=%f +lat_0=%f +ellps=sphere", "+proj=laea", centre[1], centre[2])
# Circle
angle.inc <- 2 * pi/100
angles <- seq(0, 2 * pi - angle.inc, by = angle.inc)
xv <- cos(angles) * radius*1000 + centre[1]
yv <- sin(angles) * radius*1000 + centre[2]
mp  <- spTransform(wrld_simpl, CRSobj = CRS(proj))
mpb <- gBuffer(mp, byid=TRUE, width=0)
circ <- SpatialPolygons(list(Polygons(list(Polygon(cbind(c(xv,xv[1]), c(yv,yv[1])))),ID=1)), proj4string=CRS(proj))
wrld <- gIntersection(mpb, circ, byid=FALSE)
r0  <- raster(xmn = extent(circ)[1], xmx = extent(circ)[2],
ymn = extent(circ)[3], ymx = extent(circ)[4], val = 0, res = res*1000)
proj4string(r0) <- proj
grid <- rasterize(wrld, r0, 1)
grid <- is.na(grid)
switch(mask,
sea = {},
land = {
grid <- subs(grid, data.frame(c(0,1), c(1,0)))},
none = {
grid <- subs(grid, data.frame(c(0,1), c(1,1)))
}
)
out <- cbind(coordinates(grid), grid[])
ind <- over(SpatialPoints(out[,1:2], proj4string = CRS(proj)), circ)
if(plot) {
opar <- par(mar = c(0,0,0,0))
plot(wrld)
points(out[ind==1,1:2], pch = 16, cex = 0.2,
col = ifelse(out[ind==1,3]==1, adjustcolor("orange", alpha.f = 0.9),
adjustcolor("grey10", alpha.f = 0.9)))
par(opar)
}
crds0 <- project(matrix(out[ind==1,1:2], ncol = 2, byrow = F), proj, inv = T)
crds <- cbind(crds0, mask = out[ind==1,3])
crds <- crds[!is.na(crds[,3]),]
list(crds, map = wrld, grid = grid)
}
templateEstimate <- function(tagdata,
calibration,
window = 1,
adjust = 300,
mask,
cores = detectCores()-1) {
# Define segment by date
seg  <- floor((as.numeric(tagdata$Date)- as.numeric(min(tagdata$Date)))/(24*60*60))
nseg <- length(unique(seg))
ind <- cbind(c(1:nseg)[-c((nseg-(window-1)):nseg)], c(1:nseg)[-c(1:window)])
# Split into `slices`
slice <- apply(ind, 1, function(x) tagdata[seg%in%c(x[1]:x[2]),])
n   <- length(slice)
pts <- mask[[1]][mask[[1]][,3]==1,1:2]
logp <- function(c, w, adjust) {
date <- slice[[w]]$Date
### first split into segments
ss  <- solar(date)
zX  <- refracted(zenith(ss, c[1L], c[2L]))
ct  <- c(zX[-length(zX)]>zX[-1])
ct  <- c(ct, ct[length(ct)])
### second split with adjusted twilights
if(!is.null(adjust)) {
date[!ct] <- date[!ct]-adjust
ss        <- solar(date)
zX        <- refracted(zenith(ss, c[1L], c[2L]))
}
ExpL  <- approx(calibration[,2], calibration[,3], xout = zX)$y
diffL <- (ExpL -  slice[[w]]$Light)+1e-5
# plot(slice[[w]]$Date, slice[[w]]$Light, type = "o", pch = 16, col = adjustcolor("grey", alpha.f = 0.5))
# points(slice[[w]]$Date, ExpL, type = "o", cex = 0.5)
# par(new = TRUE)
# plot(date, diffL, type = "l", xaxt = "n", xaxt = "n", lwd = 2, col = "orange")
# axis(4)
ind <- cut(zX, breaks = calibration[,1], labels = FALSE)
out  <- unlist(sapply(unique(ind), function(x) dgamma(diffL[ind==x],  calibration[x, 4], calibration[x,5], log = FALSE)))
out0 <- unlist(sapply(unique(ind), function(x) dgamma(diffL[ind==x],  calibration[x, 4], calibration[x,5], log = TRUE)))
if(is.infinite(abs(sum(out0[-which(is.infinite(out0) & diffL>0.5)], na.rm = T)))) {
return(-Inf)
} else {
return(sum(out, na.rm = T))
}
}
cat("making cluster\n")
mycl <- parallel::makeCluster(cores)
tmp  <- parallel::clusterSetRNGStream(mycl)
tmp  <- parallel::clusterExport(mycl,c("slice", "calibration", "logp"), envir=environment())
tmp<-parallel::clusterEvalQ(mycl, library("SGAT"))
## Compute likelihood
ll <- matrix(nrow = nrow(pts), ncol = n)
for(i in 1:n) {
cat("\r", "window", i, " of ", n)
flush.console()
ll[,i] <- t(parallel::parApply(mycl, pts, 1, FUN = logp, w = i, adjust = adjust))
}
end <- parallel::stopCluster(mycl)
list(crds = pts, probTab = ll)
}
source('~/Dropbox/Science/Projects/ArcticBreeding/PolarGeolocation/R/PolarGeolocation.R')
##' Calibration function
##'
##' ...
##'
##' The \code{adjust.interval} argument can be used to specify a
##' timing adjustment for tags that report the maximum light level
##' observed in the preceeding sampling interval. If this argument is
##' zero, no adjustment is made, otherwise the timestamps of sunset
##' intervals will be adjusted by this interval to compensate for the
##' recording behaviour of the tag.
##'
##' @title Calibration function
##'
##' @param tagdata a dataframe with columns \code{Date} and
##' \code{Light} that are the sequence of sample times (as POSIXct)
##' and light levels recorded by the tag at known location.
##' @param twl a dataframe with columns \code{Twilight} and
##' \code{Rise} that are the sequence of defined sunrise and sunset times.
##' @param lon calibration longitude.
##' @param lat calibration latitude.
##' @param bin the grouping factor of light recordings across zenith angles.
##' @param adjust  timing adjustment for sunset intervals.
##' @param plot logical, if \code{TRUE} a plot will be shown.
##' @return a dataframe with one row for each bin of zenith angles. Columns provide minimum and maximum zenith
##' angle (range), maximum light value (the template) and the rate and scale paramters of a fitted gamma distribution.
##' @export
getTemplateCalib <- function(tagdata,
twl,
lon,
lat,
bin = 1,
adjust = 300,
plot = TRUE) {
### first split into segments
sun <- solar(tagdata$Date)
z   <- zenith(sun, lon, lat)
ct  <- c(z[-length(z)]>z[-1])
ct <- c(ct, ct[length(ct)])
### second split with adjusted twilights
if(!is.null(adjust)) {
tagdata$Date[!ct] <- tagdata$Date[!ct]-adjust
sun <- solar(tagdata$Date)
z   <- zenith(sun, lon, lat)
ct  <- c(ct, ct[length(ct)])
}
ind <- c(1, which(ct[-length(ct)]!=ct[-1]), length(z))
segs <- NA
segs[ind+1] <- 1:length(ind)
segs <- na.approx(segs, method = "constant", rule = 2)
tagdata$Elev <- z
tagdata$Rise <- ifelse(ct[-1], TRUE, FALSE)
tagdata$Segment <- na.approx(segs[-length(segs)], method = "constant", rule = 2)
tagdata <- subset(tagdata, !is.na(Rise))
tmp03 <- split(cbind(ID = 1:nrow(tagdata), tagdata), f = tagdata$Segment)
colSet  <- colorRampPalette(c("darkblue", "aliceblue"))
colRise <- colorRampPalette(c("darkred", "rosybrown1"))
if(plot) {
plot(NA, xlim = c(min(z), 110), ylim = c(0, max(tagdata$Light, na.rm = T)), xlab = "Zenith", ylab = "Light")
t <- lapply(tmp03, function(x) {
if(x[1,5]) {
cl <- colRise(length(unique(tagdata$Segment[tagdata$Rise])))[unique(x[,"Segment"])]
} else {
cl <- colSet(length(unique(tagdata$Segment[!tagdata$Rise])))[unique(x[,"Segment"])]
}
lines(x[x[,4]<110,4], x[x[,4]<110,3], type = "o", pch = 16, col = cl, cex = 0.75)
})
}
bin.seq0 <- seq(min(tagdata$Elev), max(tagdata$Elev), by = bin)
if(plot) abline(v = bin.seq0, col = adjustcolor("grey30", alpha.f = 0.4), lty = 3)
bin.seq  <- cbind(bin.seq0[-length(bin.seq0)], bin.seq0[-1])
out1 <- apply(bin.seq, 1, function(x1) {
as.numeric(unlist(lapply(tmp03, function(x2) subset(x2, Elev>=x1[1] & Elev<=x1[2], select = ID))))
})
out2_1 <- lapply(out1, function(x) max(tagdata[x,"Light"]))
if(plot) points(apply(bin.seq, 1, mean)[apply(bin.seq, 1, mean)<110],
unlist(out2_1)[apply(bin.seq, 1, mean)<110], pch = 16, col = "black", type = "o")
out2_2 <- lapply(out1, function(x) abs(tagdata[x,"Light"] - max(tagdata[x,"Light"]))+0.1)
out3 <- lapply(out2_2, function(x) {
if(all(x==0.1)) {
out = cbind(1, 5)
} else {
fit1 <- suppressWarnings(fitdistr(x, "gamma"))
cbind(matrix(fit1$estimate[1:2], nrow = 1))
}
})
out <- as.data.frame(cbind(bin.seq, do.call("rbind", out2_1), do.call("rbind", out3)))
names(out) <- c("zMin", "zMax", "lMax", "rate", "scale")
out
}
#' Make a mask (grid) for PolarGeolocation model incorporating land or sea mask (or none)
#'
#' @param centre centre (lon, lat) of the mask.
#' @param radius radius around the centre (in km).
#' @param res resolution of grid cells in km, defaults to 150
#' @param mask set mask for areas animals are assumed to be restricted to, "sea", "land", or "none"
#' @param map the map (spatial polygon) that will be used to define land and sea. If `NULL` the dataset `wrld_simpl` from the package `maptools` will be used.
#' @import maptools
#' @import polyclip
#' @import raster
#' @import rgdal
#' @import rgeos
#' @import sp
#' @return raster object giving the locations the animal may have visited
#' @export
makeMask <- function(centre,
radius,
res = 150,
mask = "land",
map = NULL,
plot = FALSE) {
if(is.null(map)) {
data(wrld_simpl, package = "maptools", envir = environment())
} else {
if(class(map)%in%c("SpatialPolygonsDataFrame", "SpatialPolygons")) {
wrld_simpl <- map
} else {
stop("map needs to be of class 'SpatialPolygonsDataFrame' or 'SpatialPolygons'")
}
}
proj <- sprintf("%s +lon_0=%f +lat_0=%f +ellps=sphere", "+proj=laea", centre[1], centre[2])
# Circle
angle.inc <- 2 * pi/100
angles <- seq(0, 2 * pi - angle.inc, by = angle.inc)
xv <- cos(angles) * radius*1000 + centre[1]
yv <- sin(angles) * radius*1000 + centre[2]
mp  <- spTransform(wrld_simpl, CRSobj = CRS(proj))
mpb <- gBuffer(mp, byid=TRUE, width=0)
circ <- SpatialPolygons(list(Polygons(list(Polygon(cbind(c(xv,xv[1]), c(yv,yv[1])))),ID=1)), proj4string=CRS(proj))
wrld <- gIntersection(mpb, circ, byid=FALSE)
r0  <- raster(xmn = extent(circ)[1], xmx = extent(circ)[2],
ymn = extent(circ)[3], ymx = extent(circ)[4], val = 0, res = res*1000)
proj4string(r0) <- proj
grid <- rasterize(wrld, r0, 1)
grid <- is.na(grid)
switch(mask,
sea = {},
land = {
grid <- subs(grid, data.frame(c(0,1), c(1,0)))},
none = {
grid <- subs(grid, data.frame(c(0,1), c(1,1)))
}
)
out <- cbind(coordinates(grid), grid[])
ind <- over(SpatialPoints(out[,1:2], proj4string = CRS(proj)), circ)
if(plot) {
opar <- par(mar = c(0,0,0,0))
plot(wrld)
points(out[ind==1,1:2], pch = 16, cex = 0.2,
col = ifelse(out[ind==1,3]==1, adjustcolor("orange", alpha.f = 0.9),
adjustcolor("grey10", alpha.f = 0.9)))
par(opar)
}
crds0 <- project(matrix(out[ind==1,1:2], ncol = 2, byrow = F), proj, inv = T)
crds <- cbind(crds0, mask = out[ind==1,3])
crds <- crds[!is.na(crds[,3]),]
list(crds, map = wrld, grid = grid)
}
templateEstimate <- function(tagdata,
calibration,
window = 1,
adjust = 300,
mask,
cores = detectCores()-1) {
# Define segment by date
seg  <- floor((as.numeric(tagdata$Date)- as.numeric(min(tagdata$Date)))/(24*60*60))
nseg <- length(unique(seg))
ind <- cbind(c(1:nseg)[-c((nseg-(window-1)):nseg)], c(1:nseg)[-c(1:window)])
# Split into `slices`
slice <- apply(ind, 1, function(x) tagdata[seg%in%c(x[1]:x[2]),])
n   <- length(slice)
pts <- mask[[1]][mask[[1]][,3]==1,1:2]
logp <- function(c, w, adjust) {
date <- slice[[w]]$Date
### first split into segments
ss  <- solar(date)
zX  <- refracted(zenith(ss, c[1L], c[2L]))
ct  <- c(zX[-length(zX)]>zX[-1])
ct  <- c(ct, ct[length(ct)])
### second split with adjusted twilights
if(!is.null(adjust)) {
date[!ct] <- date[!ct]-adjust
ss        <- solar(date)
zX        <- refracted(zenith(ss, c[1L], c[2L]))
}
ExpL  <- approx(calibration[,2], calibration[,3], xout = zX)$y
diffL <- (ExpL -  slice[[w]]$Light)+1e-5
# plot(slice[[w]]$Date, slice[[w]]$Light, type = "o", pch = 16, col = adjustcolor("grey", alpha.f = 0.5))
# points(slice[[w]]$Date, ExpL, type = "o", cex = 0.5)
# par(new = TRUE)
# plot(date, diffL, type = "l", xaxt = "n", xaxt = "n", lwd = 2, col = "orange")
# axis(4)
ind <- cut(zX, breaks = calibration[,1], labels = FALSE)
out  <- unlist(sapply(unique(ind), function(x) dgamma(diffL[ind==x],  calibration[x, 4], calibration[x,5], log = FALSE)))
out0 <- unlist(sapply(unique(ind), function(x) dgamma(diffL[ind==x],  calibration[x, 4], calibration[x,5], log = TRUE)))
if(is.infinite(abs(sum(out0[-which(is.infinite(out0) & diffL>0.5)], na.rm = T)))) {
return(-Inf)
} else {
return(sum(out, na.rm = T))
}
}
cat("making cluster\n")
mycl <- parallel::makeCluster(cores)
tmp  <- parallel::clusterSetRNGStream(mycl)
tmp  <- parallel::clusterExport(mycl,c("slice", "calibration", "logp"), envir=environment())
tmp<-parallel::clusterEvalQ(mycl, library("SGAT"))
## Compute likelihood
ll <- matrix(nrow = nrow(pts), ncol = n)
for(i in 1:n) {
cat("\r", "window", i, " of ", n)
flush.console()
ll[,i] <- t(parallel::parApply(mycl, pts, 1, FUN = logp, w = i, adjust = adjust))
}
end <- parallel::stopCluster(mycl)
list(crds = pts, probTab = ll)
}
makeMask
xlim <- c(101, 175)
ylim <- c(55.5, 80)
centre <- c(round(xlim[1] + diff(xlim)/2), round(ylim[1] + diff(ylim)/2))
mask <- makeMask(centre, 1500, res = 75, mask = "land", plot = TRUE)
mask <- makeMask(centre, 5500, res = 50, mask = "land", plot = TRUE)
centre <- c(0, 0)
mask <- makeMask(centre, 3500, res = 50, mask = "land", plot = TRUE)
centre <- c(90, 180)
mask <- makeMask(centre, 3500, res = 50, mask = "land", plot = TRUE)
centre <- c(140, 90)
mask <- makeMask(centre, 3500, res = 50, mask = "land", plot = TRUE)
centre <- c(130, 90)
mask <- makeMask(centre, 3500, res = 50, mask = "land", plot = TRUE)
centre <- c(130, 89)
mask <- makeMask(centre, 3500, res = 50, mask = "land", plot = TRUE)
centre <- c(130, 80)
mask <- makeMask(centre, 3500, res = 50, mask = "land", plot = TRUE)
centre <- c(130, 70)
mask <- makeMask(centre, 3500, res = 50, mask = "land", plot = TRUE)
centre <- c(130, 80)
mask <- makeMask(centre, 3500, res = 50, mask = "land", plot = TRUE)
centre <- c(130, 75)
mask <- makeMask(centre, 3500, res = 50, mask = "land", plot = TRUE)
0.0013*60
0.0013*75
1*0.0013
1/0.0013
0.0013/1
0.0013*x=1
x <- seq(0, 100, length = 1000)
0.0013*x=1
x <- seq(0, 100, length = 1000)
0.0013*x=1
0.0013*x
s[which.min(abs(0.0013-1))]
x[which.min(abs(0.0013-1))]
which.min(abs(0.0013-1))
x[which.min(abs((0.0013*x)-1))]
x[which.min(abs((0.0013*x)-1))]
x[which.min(abs((0.066*x)-1))]
1085-9824
200-1767.28
2000-1767.28
### GREAT KNOT
lon.calib <- 122.21 # Broome
lat.calib <- -17.98
raw <- readMTlux("~/Dropbox/tmp/D151.lux")
### Figure 3
library(TwGeos)
library(SGAT)
raw <- readMTlux("~/Dropbox/tmp/D151.lux")
raw <- readMTlux("~/Dropbox/Temp/D151.lux")
raw$Light <- log(raw$Light)
tm <- seq(min(raw$Date), max(raw$Date), by = "day")
rise <- rep(c(TRUE, FALSE), length(tm))
c.dat <- data.frame(Twilight = twilight(rep(tm, each = 2), lon = lon.calib, lat = lat.calib,
rise = rise, zenith = 96), Rise = rise)
offset <- 4
lightImage(raw, offset = offset, zlim = c(0, 7), dt = 120)
tsimagePoints(c.dat$Twilight, offset = offset, pch = 16, cex = 0.25,
col = "orange")
twl  <- preprocessLight(raw, threshold = 1, offset = offset, lmax = 12, gr.Device = "x11")
save(twl, file = "~/Dropbox/Temp/GKN.RData")
## Calibration Period
d.calib.tm <- as.POSIXct(c("2013-03-10", "2013-03-28"), tz = "GMT")
abline(v = d.calib.tm, col = "blue")
d.calib.tm2 <- as.POSIXct(c("2013-09-01", "2013-10-05"), tz = "GMT")
abline(v = d.calib.tm2, col = "blue")
d.calib <- subset(raw, Date>=d.calib.tm[1] & Date<=d.calib.tm[2] |
Date>=d.calib.tm2[1] & Date<=d.calib.tm2[2])
d.calib.twl <- subset(twl, Twilight>=d.calib.tm[1] & Twilight<=d.calib.tm[2] |
Twilight>=d.calib.tm2[1] & Twilight<=d.calib.tm2[2])
source('~/Dropbox/Science/Projects/ArcticBreeding/PolarGeolocation/R/PolarGeolocation.R')
calib <- getTemplateCalib(d.calib, d.calib.twl, lon.calib, lat.calib, bin = 2.5)
library(zoo)
library(MASS)
calib <- getTemplateCalib(d.calib, d.calib.twl, lon.calib, lat.calib, bin = 2.5)
ylim = c(-35, 0)
### Map
libary(maptools); data(wrld_simpl)
### Map
library(maptools); data(wrld_simpl)
library(rgeos)
library(rgdal)
map <- gIntersection(wrld_simpl, as(extent(c(xlim, ylim)), "SpatialPolygons"), byid = T)
library(raster)
map <- gIntersection(wrld_simpl, as(extent(c(xlim, ylim)), "SpatialPolygons"), byid = T)
xlim = lon.calib+c(-30, 30)
ylim = c(-35, 0)
map <- gIntersection(wrld_simpl, as(extent(c(xlim, ylim)), "SpatialPolygons"), byid = T)
plot(map)
ylim = c(-39, 20)
map <- gIntersection(wrld_simpl, as(extent(c(xlim, ylim)), "SpatialPolygons"), byid = T)
plot(map)
xlim = lon.calib+c(-35, 35)
ylim = c(-39, 20)
map <- gIntersection(wrld_simpl, as(extent(c(xlim, ylim)), "SpatialPolygons"), byid = T)
plot(map)
ylim = c(-42, 20)
map <- gIntersection(wrld_simpl, as(extent(c(xlim, ylim)), "SpatialPolygons"), byid = T)
plot(map)
ylim = c(-45, 20)
map <- gIntersection(wrld_simpl, as(extent(c(xlim, ylim)), "SpatialPolygons"), byid = T)
plot(map)
ylim = c(-45, 30)
map <- gIntersection(wrld_simpl, as(extent(c(xlim, ylim)), "SpatialPolygons"), byid = T)
plot(map)
