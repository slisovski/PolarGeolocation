calibration$calibTab[x, 2],
calibration$calibTab[x,3], log = TRUE))))
}) %>% Reduce("c", .)
parallel::stopCluster(cl)
} else {
parOut <- lapply(1:nrow(crds), function(x) {
date <- tagdata$Date
ss   <- solar(date)
zX   <- refracted(zenith(ss, crds[x, 1], crds[x, 2]))
ct   <- c(zX[-length(zX)]>zX[-1])
ct   <- c(ct, ct[length(ct)])
if(!is.null(adjust)) {
date[!ct] <- date[!ct]-adjust
ss        <- solar(date)
zX        <- refracted(zenith(ss, crds[x, 1], crds[x, 2]))
}
ExpL  <- calibration$MaxL(zX)
diffL <- (ExpL -  tagdata$Light)+1e-5
ind <- cut(zX, breaks = calibration$calibTab[,1], labels = FALSE)
sum(unlist(sapply(unique(ind), function(x) dlnorm(diffL[ind==x],
calibration$calibTab[x, 2],
calibration$calibTab[x,3], log = TRUE))))
}) %>% Reduce("c", .)
}
rastOut <- tibble(lon = crds[,1], lat = crds[,2], p = rescale(parOut, c(1,0))) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
st_transform(proj) %>%
st_rasterize(st_as_stars(st_bbox(map), dx = resolution*1000, dy = resolution*1000, values = NA_real_))
if(plot) {
pl <- ggplot() +
geom_stars(data = rastOut, show.legend = F) +
scale_fill_binned(type = "viridis", na.value = "transparent") +
geom_sf(data = map, fill = NA, linewidth = 0.5) +
theme_void()
print(pl)
}
list(rastOut, map, mask = mask, polarBuffer = polarBuffer)
}
#' Extract bounding box from initialisation
#
#' @title Bounding box
#'
#' @param init output from \code{initRegion}
#' @param quantile values/region to include in bounding box
#' @param plot logical, if \code{TRUE} a plot will be shown.
#' @return ...
#' @importFrom sf st_union st_transform st_intersection st_centroid st_as_sfc st_bbox
#' @importFrom dplyr mutate
#' @export
makeMask <- function(init, quantile = 0.9, buffer = 100, plot = TRUE) {
t <- init[[1]] %>% st_as_sf() %>% st_centroid() %>% filter(!is.infinite(p)) %>% st_transform(4326) %>%
mutate(lon      = st_coordinates(.)[,1], lat = st_coordinates(.)[,2]) %>%  st_drop_geometry() %>%
arrange(lon) %>% mutate(r  = rollapply(p, 5, max, fill=NA, align="right")) %>%
arrange(desc(r)) %>% suppressWarnings()
proj <- sprintf("%s +lon_0=%f +lat_0=%f +ellps=sphere", "+proj=laea",
t$lon[1], min(abs(t$lat))) %>% suppressWarnings()
quants <- init[[1]] %>% st_as_sf() %>% filter(!is.infinite(p)) %>%
filter(p > quantile(p, probs = quantile)) %>% st_union() %>%
st_buffer(buffer*1000) %>% st_transform(proj)
box <- quants %>% st_transform(proj) %>% st_bbox() %>% st_as_sfc(crs = proj)
map <- init[[2]] %>% st_transform(proj) %>% st_intersection(box)
col <- init[[1]] %>% st_as_sf() %>% filter(!is.infinite(p)) %>% st_transform(proj) %>% st_intersection(box) %>% suppressWarnings()
if(plot) {
pl <- ggplot() +
geom_sf(data = map, fill = "grey90", color = "grey10", show.legend = F) +
geom_sf(data = col, mapping = aes(fill = p), show.legend = F, alpha = 0.7) +
scale_fill_binned(type = "viridis", na.value = "transparent") +
geom_vline(xintercept = t$lon[1], linewidth = 1, color = "orange", linetype = 2) +
geom_sf(data = box, fill = NA, color = "black") +
theme_void()
print(pl)
}
list(bbox = box, map = map, mask = init$mask, polarBuffer = init$polarBuffer)
}
#' Template fit
#
#' @title Template fit
#'
#' @export
templateEstimate <- function(tagdata,
calibration,
bbox,
resolution = 15,
adjust = 300,
ncores = detectCores(),
contour = TRUE,
plot = TRUE) {
sf_use_s2(FALSE)
mapRast <- st_rasterize(bbox$map %>% st_as_sf(), st_as_stars(st_bbox(bbox$map),
dx = resolution*1000, dy = resolution*1000, values = NA_real_))
crds  <- mapRast %>%
st_as_sf(na.rm = ifelse(bbox$mask=='none', FALSE, TRUE)) %>% st_centroid() %>% st_transform(4326) %>%
mutate(dist = st_distance(., st_point(c(0,90)) %>% st_sfc(crs = 4326))) %>%
filter(as.numeric(dist) >= as.numeric((bbox$polarBuffer*1000))) %>%
st_coordinates() %>%
suppressMessages() %>% suppressWarnings()
cl <- makeCluster(getOption("cl.cores", ncores))
clusterExport(cl, c('tagdata', 'calibration', 'crds', 'zenith', 'solar', 'refracted', 'adjust'), envir = environment())
pOut <- unlist(parLapply(cl, 1:nrow(crds), function(p) {
date <- tagdata$Date
ss   <- solar(date)
zX   <- refracted(zenith(ss, crds[p,1], crds[p,2]))
ct   <- c(zX[-length(zX)]>zX[-1])
ct   <- c(ct, ct[length(ct)])
if(!is.null(adjust)) {
date[!ct] <- date[!ct]-adjust
ss        <- solar(date)
zX        <- refracted(zenith(ss, crds[p,1],  crds[p,2]))
}
ExpL  <- calibration$MaxL(zX)
diffL <- ExpL - tagdata$Light
ind <- cut(zX, breaks = calibration$calibTab[,1], labels = FALSE)
sum(unlist(sapply(unique(ind), function(x) dlnorm(diffL[ind==x],
calibration$calibTab[x,2],
calibration$calibTab[x,3], log = TRUE))))
}))
stopCluster(cl)
rastOut <- tibble(lon = crds[,1], lat = crds[,2], p = pOut) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% st_transform(st_crs(mapRast)) %>%
st_rasterize(st_as_stars(st_bbox(bbox$map), dx = (resolution+2)*1000, dy = (resolution+2)*1000, values = NA_real_)) %>%
suppressWarnings() %>% suppressMessages()
cont    <- st_contour(rastOut, breaks = quantile(rastOut[[1]], probs = seq(0, 0.4, length = 10), na.rm = T))
if(plot) {
pl <- ggplot() +
geom_sf(data = bbox$map, fill = "grey90", color = "grey10", show.legend = F) +
geom_stars(data = rastOut, alpha = 0.7, show.legend = F) +
scale_fill_viridis_c(na.value = NA, direction = -1) +
theme_light()
if(contour) pl <- pl + geom_sf(data = cont, fill = NA, color = "orange") %>% suppressMessages()
print(pl) %>% suppressWarnings()
}
list(fit = rastOut, map = bbox$map)
}
#' Extract Location
#
#' @title Extract breeding site
#'
#' @export
locationSummary <- function(fit, quantile = 0.8, plot = T) {
tmp <- fit$fit %>% st_as_sf() %>% st_centroid() %>% st_transform(4326) %>%
mutate(lon = st_coordinates(.)[,1], lat = st_coordinates(.)[,2]) %>% suppressWarnings()
lon  <- tmp[tmp$p < quantile(tmp$p, probs = quantile),] %>% pull(lon) %>% quantile(., probs = c(0,0.5,1))
lat <- tmp[tmp$p < quantile(tmp$p, probs = quantile),] %>% pull(lat) %>% quantile(., probs = c(0,1))
t1 <- tibble(mask = 'none', lon = lon[2], lat = lat[1])
out <- t1 %>% st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% st_transform(st_crs(fit$map))
### land
pts <- st_as_sf(tibble(lon = seq(-180, 180, length = 360*2),
lat = as.numeric(t1$lat)), coords = c("lon", "lat"), crs = 4326) %>%
st_transform(st_crs(fit$map)) %>% st_intersection(fit$map) %>%
mutate(dist = st_distance(., out)) %>% arrange(dist) %>% st_transform(4326) %>% st_coordinates()
t2 <- tibble(mask = 'mask', lon = pts[1,1], lat = pts[1,2])
out <- rbind(out, t2 %>% st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% st_transform(st_crs(fit$map)))
if(plot) {
pl <- ggplot() +
geom_sf(data = fit$map, fill = "grey90", color = "grey10", show.legend = F) +
geom_stars(data = fit$fit, alpha = 0.6, show.legend = F) +
scale_fill_viridis_c(na.value = NA, direction = -1) +
geom_sf(data = out, mapping = aes(color = mask), shape = 21, fill = "white", size = 5, linewidth = 10) +
theme_light()
print(pl) %>% suppressWarnings()
}
rbind(t1, t2)
}
## Functions copied from SGAT and temporariliy included into PolarGeolocation:
## 1) solar
## 2) zenith
## 3) refracted
## 4) twilight
## 5) geolight.convert
##' Calculate solar time, the equation of time and solar declination
##'
##' The solar time, the equation of time and the sine and cosine of
##' the solar declination are calculted for the times specified by
##' \code{tm} using the same methods as
##' \url{https://gml.noaa.gov/grad/solcalc/}.
##' @title Solar Time and Declination
##' @param tm a vector of POSIXct times.
##' @return A list containing the following vectors.
##' \item{\code{solarTime}}{the solar time (degrees)}
##' \item{\code{eqnTime}}{the equation of time (minutes of time)}
##' \item{\code{sinSolarDec}}{sine of the solar declination}
##' \item{\code{cosSolarDec}}{cosine of the solar declination}
##' @seealso \code{\link{zenith}}
##' @examples
##' ## Current solar time
##' solar(Sys.time())
##' @export
solar <- function(tm) {
rad <- pi/180
## Time as Julian day (R form)
Jd <- as.numeric(tm)/86400.0+2440587.5
## Time as Julian century [G]
Jc <- (Jd-2451545)/36525
## The geometric mean sun longitude (degrees) [I]
L0 <- (280.46646+Jc*(36000.76983+0.0003032*Jc))%%360
## Geometric mean anomaly for the sun (degrees) [J]
M <- 357.52911+Jc*(35999.05029-0.0001537*Jc)
## The eccentricity of earth's orbit [K]
e <- 0.016708634-Jc*(0.000042037+0.0000001267*Jc)
## Equation of centre for the sun (degrees) [L]
eqctr <- sin(rad*M)*(1.914602-Jc*(0.004817+0.000014*Jc))+
sin(rad*2*M)*(0.019993-0.000101*Jc)+
sin(rad*3*M)*0.000289
## The true longitude of the sun (degrees) [M]
lambda0 <- L0 + eqctr
## The apparent longitude of the sun (degrees) [P]
omega <- 125.04-1934.136*Jc
lambda <- lambda0-0.00569-0.00478*sin(rad*omega)
## The mean obliquity of the ecliptic (degrees) [Q]
seconds <- 21.448-Jc*(46.815+Jc*(0.00059-Jc*(0.001813)))
obliq0 <- 23+(26+(seconds/60))/60
## The corrected obliquity of the ecliptic (degrees) [R]
omega <- 125.04-1934.136*Jc
obliq <- obliq0 + 0.00256*cos(rad*omega)
## The equation of time (minutes of time) [U,V]
y <- tan(rad*obliq/2)^2
eqnTime <- 4/rad*(y*sin(rad*2*L0) -
2*e*sin(rad*M) +
4*e*y*sin(rad*M)*cos(rad*2*L0) -
0.5*y^2*sin(rad*4*L0) -
1.25*e^2*sin(rad*2*M))
## The sun's declination (radians) [T]
solarDec <- asin(sin(rad*obliq)*sin(rad*lambda))
sinSolarDec <- sin(solarDec)
cosSolarDec <- cos(solarDec)
## Solar time unadjusted for longitude (degrees) [AB!!]
## Am missing a mod 360 here, but is only used within cosine.
solarTime <- ((Jd-0.5)%%1*1440+eqnTime)/4
#solarTime <- ((Jd-2440587.5)*1440+eqnTime)/4
## Return solar constants
list(solarTime=solarTime,
eqnTime=eqnTime,
sinSolarDec=sinSolarDec,
cosSolarDec=cosSolarDec)
}
##' Calculate the solar zenith angle for given times and locations
##'
##' \code{zenith} uses the solar time and declination calculated by
##' \code{solar} to compute the solar zenith angle for given times and
##' locations, using the same methods as
##' \url{https://gml.noaa.gov/grad/solcalc/}.  This function does not
##' adjust for atmospheric refraction see \code{\link{refracted}}.
##' @title Solar Zenith Angle
##' @param sun list of solar time and declination computed by \code{solar}.
##' @param lon vector of longitudes.
##' @param lat vector latitudes.
##' @return A vector of solar zenith angles (degrees) for the given
##' locations and times.
##' @seealso \code{\link{solar}}
##' @examples
##' ## Approx location of Sydney Harbour Bridge
##' lon <- 151.211
##' lat <- -33.852
##' ## Solar zenith angle for noon on the first of May 2000
##' ## at the Sydney Harbour Bridge
##' s <- solar(as.POSIXct("2000-05-01 12:00:00","EST"))
##' zenith(s,lon,lat)
##' @export
zenith <- function(sun,lon,lat) {
rad <- pi/180
## Suns hour angle (degrees) [AC!!]
hourAngle <- sun$solarTime+lon-180
#hourAngle <- sun$solarTime%%360+lon-180
## Cosine of sun's zenith [AD]
cosZenith <- (sin(rad*lat)*sun$sinSolarDec+
cos(rad*lat)*sun$cosSolarDec*cos(rad*hourAngle))
## Limit to [-1,1] [!!]
cosZenith[cosZenith > 1] <- 1
cosZenith[cosZenith < -1] <- -1
## Ignore refraction correction
acos(cosZenith)/rad
}
##' Adjust the solar zenith angle for atmospheric refraction.
##'
##' Given a vector of solar zeniths computed by \code{\link{zenith}},
##' \code{refracted} calculates the solar zeniths adjusted for the
##' effect of atmospheric refraction.
##'
##' \code{unrefracted} is the inverse of \code{refracted}. Given a
##' (single) solar zenith adjusted for the effect of atmospheric
##' refraction, \code{unrefracted} calculates the solar zenith as
##' computed by \code{\link{zenith}}.
##'
##' @title Atmospheric Refraction
##' @param zenith zenith angle (degrees) to adjust.
##' @return vector of zenith angles (degrees) adjusted for atmospheric
##' refraction.
##' @examples
##' ## Refraction causes the sun to appears higher on the horizon
##' refracted(85:92)
##' ## unrefracted gives unadjusted zenith (see SGAT)
##'
##' @export
refracted <- function(zenith) {
rad <- pi/180
elev <- 90-zenith
te <- tan((rad)*elev)
## Atmospheric Refraction [AF]
r <- ifelse(elev>85,0,
ifelse(elev>5,58.1/te-0.07/te^3+0.000086/te^5,
ifelse(elev>-0.575,
1735+elev*(-518.2+elev*(103.4+elev*(-12.79+elev*0.711))),-20.772/te)))
## Corrected Zenith [90-AG]
zenith-r/3600
}
calib <- getTemplateCalib(tagdata = lux.calib,
lon = lon,
lat = lat,
zAdjust = 0.1,
bin = 5)
bboxRast <- initRegion(tagdata = tagdata,
calibration = calib,
resolution = 100,
mask = "none",
plot = TRUE)
lon = 122.27
lat = -17.96
lux.calib <- GRKN_calib
twl       <- GRKN_twlCalib
tagdata   <- GRKN_breed
calib <- getTemplateCalib(tagdata = lux.calib,
lon = lon,
lat = lat,
zAdjust = 0.1,
bin = 5)
bboxRast <- initRegion(tagdata = tagdata,
calibration = calib,
resolution = 100,
mask = "none",
plot = TRUE)
bbox     <- makeMask(init = bboxRast, quantile = 0.85, plot = TRUE)
fit <- templateEstimate(tagdata = dat$tagdata,
calibration = calib,
bbox = bbox,
resolution = 50,
adjust = 300,
contour = TRUE,
ncores = detectCores(),
plot = TRUE)
bbox     <- makeMask(init = bboxRast, quantile = 0.85, plot = TRUE)
fit <- templateEstimate(tagdata = GRKN_breed,
calibration = calib,
bbox = bbox,
resolution = 50,
adjust = 300,
contour = TRUE,
ncores = detectCores(),
plot = TRUE)
fit <- templateEstimate(tagdata = GRKN_breed,
calibration = calib,
bbox = bbox,
resolution = 50,
adjust = 300,
contour = TRUE,
ncores = detectCores(),
plot = TRUE)
tagdata = GRKN_breed
resolution = 50
adjust = 300
contour = TRUE
ncores = detectCores()
plot = TRUE
tagdata = GRKN_breed
calib
sf_use_s2(FALSE)
mapRast <- st_rasterize(bbox$map %>% st_as_sf(), st_as_stars(st_bbox(bbox$map),
dx = resolution*1000, dy = resolution*1000, values = NA_real_))
crds  <- mapRast %>%
st_as_sf(na.rm = ifelse(bbox$mask=='none', FALSE, TRUE)) %>% st_centroid() %>% st_transform(4326) %>%
mutate(dist = st_distance(., st_point(c(0,90)) %>% st_sfc(crs = 4326))) %>%
filter(as.numeric(dist) >= as.numeric((bbox$polarBuffer*1000))) %>%
st_coordinates() %>%
suppressMessages() %>% suppressWarnings()
cl <- makeCluster(getOption("cl.cores", ncores))
clusterExport(cl, c('tagdata', 'calibration', 'crds', 'zenith', 'solar', 'refracted', 'adjust'), envir = environment())
calibration <- calib
clusterExport(cl, c('tagdata', 'calibration', 'crds', 'zenith', 'solar', 'refracted', 'adjust'), envir = environment())
pOut <- unlist(parLapply(cl, 1:nrow(crds), function(p) {
date <- tagdata$Date
ss   <- solar(date)
zX   <- refracted(zenith(ss, crds[p,1], crds[p,2]))
ct   <- c(zX[-length(zX)]>zX[-1])
ct   <- c(ct, ct[length(ct)])
if(!is.null(adjust)) {
date[!ct] <- date[!ct]-adjust
ss        <- solar(date)
zX        <- refracted(zenith(ss, crds[p,1],  crds[p,2]))
}
ExpL  <- calibration$MaxL(zX)
diffL <- ExpL - tagdata$Light
ind <- cut(zX, breaks = calibration$calibTab[,1], labels = FALSE)
sum(unlist(sapply(unique(ind), function(x) dlnorm(diffL[ind==x],
calibration$calibTab[x,2],
calibration$calibTab[x,3], log = TRUE))))
}))
pOut
stopCluster(cl)
rastOut <- tibble(lon = crds[,1], lat = crds[,2], p = pOut) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% st_transform(st_crs(mapRast)) %>%
st_rasterize(st_as_stars(st_bbox(bbox$map), dx = (resolution+2)*1000, dy = (resolution+2)*1000, values = NA_real_)) %>%
suppressWarnings() %>% suppressMessages()
plot(rastOut)
pOut
plot(pOut)
tibble(lon = crds[,1], lat = crds[,2], p = pOut)
plot(tibble(lon = crds[,1], lat = crds[,2], p = pOut))
rastOut <- tibble(lon = crds[,1], lat = crds[,2], p = pOut) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326)
plot(rastOut)
rastOut <- tibble(lon = crds[,1], lat = crds[,2], p = pOut) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% st_transform(st_crs(mapRast))
plot(rastOut)
rastOut <- tibble(lon = crds[,1], lat = crds[,2], p = pOut) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% st_transform(st_crs(mapRast)) %>%
st_rasterize(st_as_stars(st_bbox(bbox$map), dx = (resolution+2)*1000, dy = (resolution+2)*1000, values = NA_real_))
rastOut
plot(rastOut)
mapRast
bbox
st_bbox(mapRast)
rastOut <- tibble(lon = crds[,1], lat = crds[,2], p = pOut) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% st_transform(st_crs(mapRast)) %>%
st_rasterize(st_as_stars(st_bbox(mapRast), dx = (resolution+2)*1000, dy = (resolution+2)*1000, values = NA_real_)) %>%
suppressWarnings() %>% suppressMessages()
rastOut
plot(rastOut)
resolution
st_as_stars(st_bbox(mapRast), dx = (resolution+2)*1000, dy = (resolution+2)*1000, values = NA_real_)
st_as_stars(st_bbox(mapRast), dx = (resolution+2)*1000, dy = (resolution+2)*1000, values = 1)
st_as_stars(st_bbox(mapRast), dx = (resolution+2)*1000, dy = (resolution+2)*1000, values = 1) %>% plot()
rastOut <- tibble(lon = crds[,1], lat = crds[,2], p = pOut) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% st_transform(st_crs(mapRast)) %>%
st_rasterize(st_as_stars(st_bbox(mapRast), dx = (resolution+2)*1000, dy = (resolution+2)*1000, values = NA_real_)) %>%
suppressWarnings() %>% suppressMessages()
rastOut
rastOut <- tibble(lon = crds[,1], lat = crds[,2], p = pOut) %>% filter(!is.infinite(pOut))
rastOut <- tibble(lon = crds[,1], lat = crds[,2], p = pOut) %>% filter(!is.infinite(pOut)) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% st_transform(st_crs(mapRast)) %>%
st_rasterize(st_as_stars(st_bbox(mapRast), dx = (resolution+2)*1000, dy = (resolution+2)*1000, values = NA_real_)) %>%
suppressWarnings() %>% suppressMessages()
rastOut
plot(rastOut)
cont    <- st_contour(rastOut, breaks = quantile(rastOut[[1]], probs = seq(0, 0.4, length = 10), na.rm = T))
if(plot) {
pl <- ggplot() +
geom_sf(data = bbox$map, fill = "grey90", color = "grey10", show.legend = F) +
geom_stars(data = rastOut, alpha = 0.7, show.legend = F) +
scale_fill_viridis_c(na.value = NA, direction = -1) +
theme_light()
if(contour) pl <- pl + geom_sf(data = cont, fill = NA, color = "orange") %>% suppressMessages()
print(pl) %>% suppressWarnings()
}
#' Template fit
#
#' @title Template fit
#'
#' @export
templateEstimate <- function(tagdata,
calibration,
bbox,
resolution = 15,
adjust = 300,
ncores = detectCores(),
contour = TRUE,
plot = TRUE) {
sf_use_s2(FALSE)
mapRast <- st_rasterize(bbox$map %>% st_as_sf(), st_as_stars(st_bbox(bbox$map),
dx = resolution*1000, dy = resolution*1000, values = NA_real_))
crds  <- mapRast %>%
st_as_sf(na.rm = ifelse(bbox$mask=='none', FALSE, TRUE)) %>% st_centroid() %>% st_transform(4326) %>%
mutate(dist = st_distance(., st_point(c(0,90)) %>% st_sfc(crs = 4326))) %>%
filter(as.numeric(dist) >= as.numeric((bbox$polarBuffer*1000))) %>%
st_coordinates() %>%
suppressMessages() %>% suppressWarnings()
cl <- makeCluster(getOption("cl.cores", ncores))
clusterExport(cl, c('tagdata', 'calibration', 'crds', 'zenith', 'solar', 'refracted', 'adjust'), envir = environment())
pOut <- unlist(parLapply(cl, 1:nrow(crds), function(p) {
date <- tagdata$Date
ss   <- solar(date)
zX   <- refracted(zenith(ss, crds[p,1], crds[p,2]))
ct   <- c(zX[-length(zX)]>zX[-1])
ct   <- c(ct, ct[length(ct)])
if(!is.null(adjust)) {
date[!ct] <- date[!ct]-adjust
ss        <- solar(date)
zX        <- refracted(zenith(ss, crds[p,1],  crds[p,2]))
}
ExpL  <- calibration$MaxL(zX)
diffL <- ExpL - tagdata$Light
ind <- cut(zX, breaks = calibration$calibTab[,1], labels = FALSE)
sum(unlist(sapply(unique(ind), function(x) dlnorm(diffL[ind==x],
calibration$calibTab[x,2],
calibration$calibTab[x,3], log = TRUE))))
}))
stopCluster(cl)
rastOut <- tibble(lon = crds[,1], lat = crds[,2], p = pOut) %>% filter(!is.infinite(pOut)) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% st_transform(st_crs(mapRast)) %>%
st_rasterize(st_as_stars(st_bbox(mapRast), dx = (resolution+2)*1000, dy = (resolution+2)*1000, values = NA_real_)) %>%
suppressWarnings() %>% suppressMessages()
cont    <- st_contour(rastOut, breaks = quantile(rastOut[[1]], probs = seq(0, 0.4, length = 10), na.rm = T))
if(plot) {
pl <- ggplot() +
geom_sf(data = bbox$map, fill = "grey90", color = "grey10", show.legend = F) +
geom_stars(data = rastOut, alpha = 0.7, show.legend = F) +
scale_fill_viridis_c(na.value = NA, direction = -1) +
theme_light()
if(contour) pl <- pl + geom_sf(data = cont, fill = NA, color = "orange") %>% suppressMessages()
print(pl) %>% suppressWarnings()
}
list(fit = rastOut, map = bbox$map)
}
remotes::install_github("slisovski/PolarGeolocation", force = TRUE)
